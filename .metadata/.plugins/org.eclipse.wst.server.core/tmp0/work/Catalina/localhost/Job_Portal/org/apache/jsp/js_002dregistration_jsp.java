/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.0-M7
 * Generated at: 2025-04-22 06:41:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class js_002dregistration_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Registration Page</title>\r\n");
      out.write("\r\n");
      out.write("    <!-- Google Fonts - Poppins -->\r\n");
      out.write("    <link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("    <!-- Internal CSS -->\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: 'Poppins', sans-serif; /* Apply Poppins font */\r\n");
      out.write("            background-color: #f4f4f4;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            height: 100%;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .registration-container {\r\n");
      out.write("            background-color: white;\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("            border-radius: 8px;\r\n");
      out.write("            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            max-width: 500px;\r\n");
      out.write("            position: relative;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        h2 {\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("            font-weight: 500; /* You can customize the font weight */\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        form {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            flex-direction: column;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        label {\r\n");
      out.write("            margin-bottom: 8px;\r\n");
      out.write("            font-weight: 600;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        input {\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            margin-bottom: 15px;\r\n");
      out.write("            border: 1px solid #ccc;\r\n");
      out.write("            border-radius: 4px;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        input:focus {\r\n");
      out.write("            border-color: #4d90fe;\r\n");
      out.write("            outline: none;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .submit-btn {\r\n");
      out.write("            background-color: #4CAF50;\r\n");
      out.write("            color: white;\r\n");
      out.write("            padding: 12px;\r\n");
      out.write("            border: none;\r\n");
      out.write("            border-radius: 4px;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .submit-btn:hover {\r\n");
      out.write("            background-color: #45a049;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .error {\r\n");
      out.write("            color: red;\r\n");
      out.write("            font-size: 14px;\r\n");
      out.write("            margin-bottom: 10px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .file-upload {\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            border: 1px solid #ccc;\r\n");
      out.write("            border-radius: 4px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .file-upload input[type=\"file\"] {\r\n");
      out.write("            padding: 5px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* Profile Picture - Circle View */\r\n");
      out.write("        .profile-pic-container {\r\n");
      out.write("            position: absolute;\r\n");
      out.write("            top: 10px;\r\n");
      out.write("            right: 20px;\r\n");
      out.write("            width: 80px;\r\n");
      out.write("            height: 80px;\r\n");
      out.write("            border-radius: 50%;\r\n");
      out.write("            border: 3px solid #ccc;\r\n");
      out.write("            overflow: hidden;\r\n");
      out.write("            background-color: #e0e0e0;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .profile-pic-container img {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            height: 100%;\r\n");
      out.write("            object-fit: cover;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* Hidden file input */\r\n");
      out.write("        #profilePicUpload {\r\n");
      out.write("            display: none;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"registration-container\">\r\n");
      out.write("        <h2>Registration Form</h2>\r\n");
      out.write("\r\n");
      out.write("        <!-- Profile Picture - Click to upload -->\r\n");
      out.write("        <div class=\"profile-pic-container\" onclick=\"triggerFileInput()\">\r\n");
      out.write("            <img id=\"profilePicPreview\" src=\"https://via.placeholder.com/80\" alt=\"Profile Picture\">\r\n");
      out.write("        </div>\r\n");
      out.write("        <input type=\"file\" id=\"profilePicUpload\" name=\"profilePicUpload\" accept=\".jpg, .jpeg, .png\" onchange=\"previewProfilePic()\">\r\n");
      out.write("\r\n");
      out.write("        <form id=\"registrationForm\" action=\"register.jsp\" method=\"post\" enctype=\"multipart/form-data\">\r\n");
      out.write("            <label for=\"fullName\">Full Name</label>\r\n");
      out.write("            <input type=\"text\" id=\"fullName\" name=\"fullName\" required>\r\n");
      out.write("\r\n");
      out.write("            <label for=\"email\">Email Address</label>\r\n");
      out.write("            <input type=\"email\" id=\"email\" name=\"email\" required>\r\n");
      out.write("\r\n");
      out.write("            <label for=\"password\">Password</label>\r\n");
      out.write("            <input type=\"password\" id=\"password\" name=\"password\" required>\r\n");
      out.write("\r\n");
      out.write("            <label for=\"confirmPassword\">Confirm Password</label>\r\n");
      out.write("            <input type=\"password\" id=\"confirmPassword\" name=\"confirmPassword\" required>\r\n");
      out.write("\r\n");
      out.write("            <label for=\"phone\">Phone Number</label>\r\n");
      out.write("            <input type=\"tel\" id=\"phone\" name=\"phone\" required>\r\n");
      out.write("\r\n");
      out.write("            <!-- File Upload for other documents -->\r\n");
      out.write("            <label for=\"fileUpload\">Upload File (Document)</label>\r\n");
      out.write("            <input type=\"file\" id=\"fileUpload\" name=\"fileUpload\" class=\"file-upload\" accept=\".jpg, .jpeg, .png, .pdf, .docx\" required>\r\n");
      out.write("\r\n");
      out.write("            <button type=\"submit\" class=\"submit-btn\">Register</button>\r\n");
      out.write("\r\n");
      out.write("            <div id=\"errorMessages\" class=\"error\">\r\n");
      out.write("                ");
      out.write("\r\n");
      out.write("                ");
      out.print( request.getAttribute("errorMessages") != null ? request.getAttribute("errorMessages") : "" );
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <!-- Internal JavaScript -->\r\n");
      out.write("    <script>\r\n");
      out.write("        // Function to trigger the file input click when the profile circle is clicked\r\n");
      out.write("        function triggerFileInput() {\r\n");
      out.write("            document.getElementById('profilePicUpload').click();\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // Function to preview the uploaded profile picture\r\n");
      out.write("        function previewProfilePic() {\r\n");
      out.write("            const fileInput = document.getElementById(\"profilePicUpload\");\r\n");
      out.write("            const file = fileInput.files[0];\r\n");
      out.write("            const preview = document.getElementById(\"profilePicPreview\");\r\n");
      out.write("\r\n");
      out.write("            if (file) {\r\n");
      out.write("                const reader = new FileReader();\r\n");
      out.write("                reader.onload = function(e) {\r\n");
      out.write("                    preview.src = e.target.result;\r\n");
      out.write("                };\r\n");
      out.write("                reader.readAsDataURL(file);\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
