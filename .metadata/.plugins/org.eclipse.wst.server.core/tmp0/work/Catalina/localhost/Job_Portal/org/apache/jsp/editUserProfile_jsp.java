/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.0-M7
 * Generated at: 2025-04-24 12:39:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.Map;
import com.model.ProjectModel;
import java.util.List;
import com.model.EducationModel;
import com.model.UserModel;

public final class editUserProfile_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.model.ProjectModel");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("com.model.EducationModel");
    _jspx_imports_classes.add("com.model.UserModel");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

UserModel model = (UserModel) session.getAttribute("model");
EducationModel emodel = (EducationModel) session.getAttribute("emodel");
Map<String, Object> userProjects = (Map<String, Object>) session.getAttribute("userProjects");

if (model == null || emodel == null || userProjects == null) {
	response.sendRedirect("userLogin.jsp?error=object is getting null");
	return;
}

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Edit User Profile</title>\r\n");
      out.write("<link\r\n");
      out.write("\thref=\"https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap\"\r\n");
      out.write("\trel=\"stylesheet\">\r\n");
      out.write("<style>\r\n");
      out.write(" /* Reset */ * {\r\n");
      out.write("\tbox-sizing: border-box;\r\n");
      out.write("\tmargin: 0;\r\n");
      out.write("\tpadding: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Page styling */\r\n");
      out.write("body {\r\n");
      out.write("\tfont-family: 'Poppins', sans-serif;\r\n");
      out.write("\tbackground: linear-gradient(to right, #fdfdfd, #e6f0ff);\r\n");
      out.write("\tpadding: 60px 40px;\r\n");
      out.write("\tcolor: #333;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Form container takes full width */\r\n");
      out.write("form {\r\n");
      out.write("\tmax-width: 1000px;\r\n");
      out.write("\tmargin: 0 auto;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Headings */\r\n");
      out.write("h2 {\r\n");
      out.write("\tfont-size: 36px;\r\n");
      out.write("\tcolor: #1e3a5f;\r\n");
      out.write("\tfont-weight: 600;\r\n");
      out.write("\tmargin-bottom: 40px;\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Section headers */\r\n");
      out.write("h3 {\r\n");
      out.write("\tmargin-top: 50px;\r\n");
      out.write("\tfont-size: 24px;\r\n");
      out.write("\tcolor: #007BFF;\r\n");
      out.write("\tborder-bottom: 2px solid #007BFF;\r\n");
      out.write("\tpadding-bottom: 6px;\r\n");
      out.write("\tmargin-bottom: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Labels & inputs */\r\n");
      out.write("label {\r\n");
      out.write("\tdisplay: block;\r\n");
      out.write("\tmargin-bottom: 6px;\r\n");
      out.write("\tfont-weight: 500;\r\n");
      out.write("\tfont-size: 15px;\r\n");
      out.write("\tcolor: #2c3e50;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=\"text\"], input[type=\"email\"], input[type=\"number\"], textarea,\r\n");
      out.write("\tselect {\r\n");
      out.write("\twidth: 100%;\r\n");
      out.write("\tpadding: 12px;\r\n");
      out.write("\tmargin-bottom: 20px;\r\n");
      out.write("\tborder: 1px solid #ccc;\r\n");
      out.write("\tborder-radius: 6px;\r\n");
      out.write("\tfont-size: 15px;\r\n");
      out.write("\tbackground-color: #fff;\r\n");
      out.write("\ttransition: 0.2s;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input:focus, textarea:focus, select:focus {\r\n");
      out.write("\tborder-color: #007BFF;\r\n");
      out.write("\tbox-shadow: 0 0 5px rgba(0, 123, 255, 0.15);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Side-by-side fields */\r\n");
      out.write(".flex-row {\r\n");
      out.write("\tdisplay: flex;\r\n");
      out.write("\tflex-wrap: wrap;\r\n");
      out.write("\tgap: 40px;\r\n");
      out.write("\tmargin-bottom: 30px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".flex-item {\r\n");
      out.write("\tflex: 1;\r\n");
      out.write("\tmin-width: 200px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Buttons */\r\n");
      out.write(".form-actions {\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("\tmargin-top: 40px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".form-actions button {\r\n");
      out.write("\tpadding: 12px 25px;\r\n");
      out.write("\tbackground-color: #007BFF;\r\n");
      out.write("\tcolor: white;\r\n");
      out.write("\tborder: none;\r\n");
      out.write("\tborder-radius: 6px;\r\n");
      out.write("\tfont-size: 16px;\r\n");
      out.write("\tcursor: pointer;\r\n");
      out.write("\ttransition: background-color 0.3s ease, transform 0.2s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".form-actions button:hover {\r\n");
      out.write("\tbackground-color: #0056b3;\r\n");
      out.write("\ttransform: translateY(-2px);\r\n");
      out.write("\tbox-shadow: 0 4px 12px rgba(0, 123, 255, 0.2);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Project section visual grouping */\r\n");
      out.write(".project-block {\r\n");
      out.write("\tbackground-color: #f4faff;\r\n");
      out.write("\tborder-left: 5px solid #007BFF;\r\n");
      out.write("\tpadding: 20px;\r\n");
      out.write("\tmargin-bottom: 25px;\r\n");
      out.write("\tborder-radius: 8px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<div class=\"form-container\">\r\n");
      out.write("\t\t<h2>Edit Profile</h2>\r\n");
      out.write("\t\t<form action=\"updateUserProfile.jsp\" method=\"post\"\r\n");
      out.write("\t\t\tenctype=\"multipart/form-data\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t<label for=\"firstName\">First Name:</label> <input type=\"text\"\r\n");
      out.write("\t\t\t\tid=\"firstName\" name=\"firstName\" value=\"");
      out.print(model.getFirstName());
      out.write("\"\r\n");
      out.write("\t\t\t\trequired> <label for=\"lastName\">Last Name:</label> <input\r\n");
      out.write("\t\t\t\ttype=\"text\" id=\"lastName\" name=\"lastName\"\r\n");
      out.write("\t\t\t\tvalue=\"");
      out.print(model.getLastName());
      out.write("\" required> <label\r\n");
      out.write("\t\t\t\tfor=\"email\">Email:</label> <input type=\"email\" id=\"email\"\r\n");
      out.write("\t\t\t\tname=\"email\" value=\"");
      out.print(model.getEmail());
      out.write("\" required>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<!-- Age & Gender side-by-side -->\r\n");
      out.write("\t\t\t<div class=\"flex-row\">\r\n");
      out.write("\t\t\t\t<div class=\"flex-item\">\r\n");
      out.write("\t\t\t\t\t<label for=\"age\">Age:</label> <input type=\"number\" id=\"age\"\r\n");
      out.write("\t\t\t\t\t\tname=\"age\" value=\"");
      out.print(model.getAge());
      out.write("\" required>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"flex-item\">\r\n");
      out.write("\t\t\t\t\t<label for=\"gender\">Gender:</label> <select id=\"gender\"\r\n");
      out.write("\t\t\t\t\t\tname=\"gender\">\r\n");
      out.write("\t\t\t\t\t\t<option value=\"Male\"\r\n");
      out.write("\t\t\t\t\t\t\t");
      out.print("Male".equals(model.getGender()) ? "selected" : "");
      out.write(">Male</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"Female\"\r\n");
      out.write("\t\t\t\t\t\t\t");
      out.print("Female".equals(model.getGender()) ? "selected" : "");
      out.write(">Female</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"Other\"\r\n");
      out.write("\t\t\t\t\t\t\t");
      out.print("Other".equals(model.getGender()) ? "selected" : "");
      out.write(">Other</option>\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<label for=\"address\">Address:</label>\r\n");
      out.write("\t\t\t<textarea id=\"address\" name=\"address\" rows=\"3\" required>");
      out.print(model.getAddress());
      out.write("</textarea>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<label for=\"phone\">Phone Number:</label> <input type=\"text\"\r\n");
      out.write("\t\t\t\tid=\"phone\" name=\"phone\" value=\"");
      out.print(model.getPhone());
      out.write("\" required>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<!-- Education Section -->\r\n");
      out.write("\t\t\t<h3 style=\"margin: 30px 0px;\">Education</h3>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<label for=\"instituteName\">Institute Name:</label> <input type=\"text\"\r\n");
      out.write("\t\t\t\tid=\"instituteName\" name=\"instituteName\"\r\n");
      out.write("\t\t\t\tvalue=\"");
      out.print((emodel.getInstituteName() != null && !emodel.getInstituteName().isEmpty()) ? emodel.getInstituteName() : "");
      out.write("\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t<div class=\"flex-row\">\r\n");
      out.write("\t\t\t\t<div class=\"flex-item\">\r\n");
      out.write("\t\t\t\t\t<label for=\"passoutYear\">Passout Year:</label> <select\r\n");
      out.write("\t\t\t\t\t\tid=\"passoutYear\" name=\"passoutYear\">\r\n");
      out.write("\t\t\t\t\t\t");

						int currentYear = java.util.Calendar.getInstance().get(java.util.Calendar.YEAR);
						int selectedYear = emodel.getPassoutYear();
						for (int year = 1920; year <= currentYear; year++) {
							String selected = (year == selectedYear) ? "selected" : "";
						
      out.write("\r\n");
      out.write("\t\t\t\t\t\t<option value=\"");
      out.print(year);
      out.write('"');
      out.write(' ');
      out.print(selected);
      out.write('>');
      out.print(year);
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t");

						}
						
      out.write("\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"flex-item\">\r\n");
      out.write("\t\t\t\t\t<label for=\"degreeName\">Degree Name:</label> <input type=\"text\"\r\n");
      out.write("\t\t\t\t\t\tid=\"degreeName\" name=\"degreeName\"\r\n");
      out.write("\t\t\t\t\t\tvalue=\"");
      out.print((emodel.getDegreeName() != null && !emodel.getDegreeName().isEmpty()) ? emodel.getDegreeName() : "");
      out.write("\">\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<label for=\"degreeDescription\">Degree Description:</label> <input\r\n");
      out.write("\t\t\t\ttype=\"text\" id=\"degreeDescription\" name=\"degreeDescription\"\r\n");
      out.write("\t\t\t\tvalue=\"");
      out.print((emodel.getDegreeDescription() != null && !emodel.getDegreeDescription().isEmpty())
		? emodel.getDegreeDescription()
		: "");
      out.write("\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t<h3 style=\"margin: 30px 0px;\">Projects</h3>\r\n");
      out.write("\r\n");
      out.write("\t\t\t");

			List<ProjectModel> projects = (List<ProjectModel>) userProjects.get("projects");
			List<String> languagesList = (List<String>) userProjects.get("languages");

			for (int i = 0; i < projects.size(); i++) {
				ProjectModel p = projects.get(i);
				String langs = languagesList.get(i);
			
      out.write("\r\n");
      out.write("\t\t\t<div style=\"margin-bottom: 25px;\">\r\n");
      out.write("\t\t\t\t<label for=\"projectName");
      out.print(i);
      out.write("\"><strong>Project\r\n");
      out.write("\t\t\t\t\t\tName:</strong></label> <input type=\"text\" id=\"projectName");
      out.print(i);
      out.write("\"\r\n");
      out.write("\t\t\t\t\tname=\"projectName");
      out.print(i);
      out.write("\" value=\"");
      out.print(p.getName());
      out.write("\" required>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<label for=\"projectDesc");
      out.print(i);
      out.write("\" style=\"margin-top: 10px;\"><strong>Project\r\n");
      out.write("\t\t\t\t\t\tDescription:</strong></label>\r\n");
      out.write("\t\t\t\t<textarea id=\"projectDesc");
      out.print(i);
      out.write("\" name=\"projectDesc");
      out.print(i);
      out.write("\" rows=\"3\"\r\n");
      out.write("\t\t\t\t\trequired>");
      out.print(p.getDescription());
      out.write("</textarea>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<label for=\"projectLang");
      out.print(i);
      out.write("\" style=\"margin-top: 10px;\"><strong>Coding\r\n");
      out.write("\t\t\t\t\t\tLanguages:</strong></label> <input type=\"text\" id=\"projectLang");
      out.print(i);
      out.write("\"\r\n");
      out.write("\t\t\t\t\tname=\"projectLang");
      out.print(i);
      out.write("\" value=\"");
      out.print(langs);
      out.write("\" required> <input\r\n");
      out.write("\t\t\t\t\ttype=\"hidden\" name=\"projectId");
      out.print(i);
      out.write("\" value=\"");
      out.print(p.getProjectid());
      out.write("\">\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t");

			}
			
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t<input type=\"hidden\" name=\"projectCount\" value=\"");
      out.print(projects.size());
      out.write("\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t<div class=\"form-actions\">\r\n");
      out.write("\t\t\t\t<button type=\"submit\" name=\"action\" value=\"updateUserProfile\">Update\r\n");
      out.write("\t\t\t\t\tProfile</button>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
