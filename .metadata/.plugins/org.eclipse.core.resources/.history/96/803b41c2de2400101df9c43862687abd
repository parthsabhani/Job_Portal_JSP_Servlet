package com.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.model.EducationModel;
import com.model.ProjectModel;
import com.model.UserModel;
import com.util.ConnectionClass;

public class UserDao 
{
	Connection c = null;
	
	public int userRegistration(UserModel rmodel)
	{
		int x= 0;
		
		c = ConnectionClass.getConnection();
		String q = "INSERT INTO users (firstName, lastName, email, age, gender, address, phone, password, isActive)"
				+ " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
		
		try 
		{
			PreparedStatement ps = c.prepareStatement(q);
			ps.setString(1, rmodel.getFirstName());
			ps.setString(2, rmodel.getLastName());
			ps.setString(3, rmodel.getEmail());
			ps.setInt(4, rmodel.getAge());
			ps.setString(5, rmodel.getGender());
			ps.setString(6, rmodel.getAddress());
			ps.setString(7, rmodel.getPhone());
			ps.setString(8, rmodel.getPassword());
			ps.setBoolean(9, true);
			
			x = ps.executeUpdate();
			c.close();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return x;
	}

	public boolean isEmailExist(String email)
	{
		boolean isExist = false;
		c = ConnectionClass.getConnection();
		String q = "select * from users where email = ? and isActive = true";
		try 
		{			
			PreparedStatement ps = c.prepareStatement(q);
			ps.setString(1, email);
			
			ResultSet rs = ps.executeQuery();
			
			while(rs.next())
			{
				isExist = true;
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		return isExist;
	}

	public UserModel userLogin(String email, String password)
	{
		UserModel model = null;
		
		c = ConnectionClass.getConnection();
		String q = "select * from users where email = ? and password = ? and isActive = true";
		
		try 
		{
			PreparedStatement ps = c.prepareStatement(q);
			ps.setString(1, email);
			ps.setString(2, password);
			
			ResultSet rs = ps.executeQuery();
			
			while(rs.next())
			{
				model = new UserModel();
				model.setUserid(rs.getInt("userid"));
				model.setFirstName(rs.getString("firstName"));
				model.setLastName(rs.getString("lastName"));
				model.setEmail(rs.getString("email"));
				model.setAge(rs.getInt("age"));
				model.setGender(rs.getString("gender"));
				model.setAddress(rs.getString("address"));
				model.setPhone(rs.getString("phone"));
				model.setPassword(rs.getString("password"));
				model.setActive(rs.getBoolean("isActive"));;
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return model;
	}
	
	public int deleteUserProfile(int userId)
	{
		int x = 0;
		
		c = ConnectionClass.getConnection();
		String q = "update users set isActive=false where userid = ?";
		
		try
		{			
			PreparedStatement ps = c.prepareStatement(q);
			ps.setInt(1, userId);
			
			x = ps.executeUpdate();
			c.close();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return x;
	}

	// Get user education
	public EducationModel getUserEducation(int userId)
	{
		EducationModel emodel = null;
		
		c = ConnectionClass.getConnection();
		String q = "SELECT e.educationid, e.institutionname, e.degreename, e.degreedescription, e.passoutyear "
				+ "FROM education e "
				+ "JOIN users s ON s.educationid = e.educationid "
				+ "WHERE s.userid = ?; "; 
		
		try 
		{
			PreparedStatement ps = c.prepareStatement(q);
			ps.setInt(1, userId);
			
			ResultSet rs = ps.executeQuery();
			
			while(rs.next())
			{
				emodel = new EducationModel();
				emodel.setInstituteName(rs.getString("institutionname"));
				emodel.setDegreeName(rs.getString("degreename"));
				emodel.setDegreeDescription(rs.getString("degreedescription"));
				emodel.setPassoutYear(rs.getInt("passoutyear"));
			}
			c.close();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return emodel;
	}

	// Get user project
	public Map<String, Object> getUserProject(int userId)
	{
		List<ProjectModel> projectList = new ArrayList<ProjectModel>();
		List<String> projectLanguagesList = new ArrayList<>(); 
		
		c = ConnectionClass.getConnection();
		String q = "SELECT p.projectid, p.name, p.description, "
		         + "string_agg((SELECT cl.languagename FROM codinglanguage cl "
		         + "WHERE cl.codinglanguageid = pl.codinglanguageid) , ', ') AS languages "
		         + "FROM project p "
		         + "JOIN userproject up ON p.projectid = up.projectid "
		         + "JOIN projectlanguage pl ON p.projectid = pl.projectid "
		         + "WHERE up.userid = ? and p.isactive = true and pl.isactive = true "
		         + "GROUP BY p.projectid, p.name, p.description";
		
		try
		{
			PreparedStatement ps = c.prepareStatement(q);
			ps.setInt(1, userId);
			
			ResultSet rs = ps.executeQuery();
			
			while(rs.next())
			{
				ProjectModel pmodel = new ProjectModel();
				pmodel.setProjectid(rs.getInt("projectid"));
				pmodel.setName(rs.getString("name"));
				pmodel.setDescription(rs.getString("description"));
				System.out.println(rs.getInt("projectid") + " "+ rs.getString("name") 
					+ " "+ rs.getString("description") + " " + rs.getString("languages"));
				String languages = rs.getString("languages");
                projectLanguagesList.add(languages);
                
				projectList.add(pmodel);
			}
			c.close();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		Map<String, Object> userProjects= new HashMap();
		userProjects.put("projects", projectList);
		userProjects.put("languages", projectLanguagesList);
		
		return userProjects;
	}

	// Delete user project
	// User Project Delete
	public int deleteProject(int projectId)
	{
		int x =0;
		
		c = ConnectionClass.getConnection();
		String q1 = "update project set isactive = false where projectid = ?";		
		String q2 = "update projectlanguage set isactive = false where projectid = ?";
		
		try 
		{
			PreparedStatement ps1 = c.prepareStatement(q1);
			ps1.setInt(1, projectId);
			
			PreparedStatement ps2 = c.prepareStatement(q2);
			ps2.setInt(1, projectId);
			
			// if both query execute
			if(ps1.executeUpdate() > 0 && ps2.executeUpdate() > 0)
			{				
				x = ps1.executeUpdate();
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return x;
	}

	
	// Update User Profile
	public int updateUserProfile(int projectId)
	{
int x =0;
		
		c = ConnectionClass.getConnection();
		String q1 = "update project set isactive = false where projectid = ?";
	}
}

